// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	// Calculating next instruction based on jump bits. jump bits = [negative, zero, positive]

	And(a=instruction[1], b=zr, out=jmpZero);							// If ALU output zero and jump condition zero, then jump
	And(a=instruction[2], b=ng, out=jmpNeg);							// If ALU output neg and jump condition neg, then jump
	Or(a=zr, b=ng, out=notPos);											// ALU output is positive if both zr and ng are zero
	Not(in=notPos, out=pos);											
	And(a=instruction[0], b=pos, out=jmpPos);							// If ALU output pos and jump condition pos, then jump
	Or(a=jmpZero, b=jmpNeg, out=tempLoadPC);							
	Or(a=tempLoadPC, b=jmpPos, out=loadPC0);							// If any one of jump condition true, then jump
	Mux(a=false, b=loadPC0, sel=instruction[15], out=loadPC);			// Only jump if it is a C-instruction
	Not(in=loadPC, out=incPC);											// Increment if not jumping
	PC(in=outRegA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);

	// ALU
	Mux16(a=outRegA, b=inM, sel=instruction[12], out=inALU);			// selects if the second input of ALU is M or A
	ALU(x=outRegD, y=inALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=inRegD, out=outM, zr=zr, ng=ng);

	// Decide values of regA
	Mux(a=true, b=instruction[5], sel=instruction[15], out=loadRegA);		// if A-instruction then load regA; else check the C-instruction 
	Mux16(a=instruction, b=outALU, sel=instruction[15], out=inRegA);		// if A-instruction input to regA is the instruction itself; else the output of ALU

	// Load regD and M
	Mux(a=false, b=instruction[4], sel=instruction[15], out=loadRegD);		// If A-instruction don't load D
	Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);		// If A-instruction don't load M

	// Load virtual registers
	DRegister(in=inRegD, load=loadRegD, out=outRegD);
	ARegister(in=inRegA, load=loadRegA, out=outRegA, out[0..14]=addressM);
}